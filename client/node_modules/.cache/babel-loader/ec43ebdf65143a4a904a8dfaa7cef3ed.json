{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //for database\n\nimport \"firebase/auth\"; //for authentication\n\nconst config = {\n  apiKey: \"AIzaSyCA8Y38lDUOzDpoQxZY22_VIQoDzWqxbFA\",\n  authDomain: \"e-commerce-apparel-site-db.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-apparel-site-db.firebaseio.com\",\n  projectId: \"e-commerce-apparel-site-db\",\n  storageBucket: \"e-commerce-apparel-site-db.appspot.com\",\n  messagingSenderId: \"755266400201\",\n  appId: \"1:755266400201:web:8aeab65945cbe169f40218\",\n  measurementId: \"G-BKX0TFD1F5\"\n};\n/*  Firestore(DB) is NOSQL DB which has data in the form of COLLECTIONS comprising of documents, where a document might also contain a collection and so on\n    When we query this db, we can get two types of results either reference to the returned data or data itself(which is called SNAPSHOT)\n*/\n// this func adds user when he/she logs in and already doesn't exist firestore(db) to be added to firestore i.e firebase database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); //this is the user Reference\n\n  const userSnapshot = await userRef.get(); // this is the user data which user reference refers to\n  // if user not in db add it to it\n\n  if (!userSnapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"User could not be added to db\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Setting up Google Sign in with Firebase\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); // this opens Google Sign In pop-up and returns promise which if succeds returns UserRef\n// ADD SHOP-DATA TO FIREBASE\n\nexport const addCollectionAndDocumentsForShopCollections = async (collectionName, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionName);\n  const batch = firestore.batch(); // batch all queries together so that either all fail or pass\n\n  objectsToAdd.forEach(object => {\n    const {\n      items,\n      title\n    } = object;\n    const newDocRef = collectionRef.doc(); // generate a doc with unique id\n\n    batch.set(newDocRef, {\n      title,\n      items\n    });\n  });\n  return await batch.commit();\n}; // gets array of 'collections' document from firestore then return it after converting it to an Object same form as in shop.data.js\n\nexport const getShopData = collectionSnapshots => {\n  const transformedCollections = collectionSnapshots.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    const id = doc.id;\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id,\n      items,\n      title\n    };\n  });\n  return transformedCollections.reduce((collections, collection) => {\n    collections[collection.title.toLowerCase()] = collection;\n    return collections;\n  }, {});\n};\nexport const getUserinSession = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      //if we get userAuth resolve the promise else reject with error\n      unsubscribe(); //since we want result only once unsubscribe from onAuthStateChanged observer\n\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/r0k01xr/react_course/e-commerce_apparel_webiste/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","userSnapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","addCollectionAndDocumentsForShopCollections","collectionName","objectsToAdd","collectionRef","collection","batch","forEach","object","items","title","newDocRef","commit","getShopData","collectionSnapshots","transformedCollections","docs","map","data","id","routeName","encodeURI","toLowerCase","reduce","collections","getUserinSession","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\"; //for database\nimport \"firebase/auth\"; //for authentication\n\nconst config = {\n    apiKey: \"AIzaSyCA8Y38lDUOzDpoQxZY22_VIQoDzWqxbFA\",\n    authDomain: \"e-commerce-apparel-site-db.firebaseapp.com\",\n    databaseURL: \"https://e-commerce-apparel-site-db.firebaseio.com\",\n    projectId: \"e-commerce-apparel-site-db\",\n    storageBucket: \"e-commerce-apparel-site-db.appspot.com\",\n    messagingSenderId: \"755266400201\",\n    appId: \"1:755266400201:web:8aeab65945cbe169f40218\",\n    measurementId: \"G-BKX0TFD1F5\",\n};\n\n/*  Firestore(DB) is NOSQL DB which has data in the form of COLLECTIONS comprising of documents, where a document might also contain a collection and so on\n    When we query this db, we can get two types of results either reference to the returned data or data itself(which is called SNAPSHOT)\n*/\n// this func adds user when he/she logs in and already doesn't exist firestore(db) to be added to firestore i.e firebase database\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`); //this is the user Reference\n    const userSnapshot = await userRef.get(); // this is the user data which user reference refers to\n\n    // if user not in db add it to it\n    if (!userSnapshot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date(); \n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        } catch (error) {\n            console.log(\"User could not be added to db\",error.message);\n        }\n    }\n    return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// Setting up Google Sign in with Firebase\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); // this opens Google Sign In pop-up and returns promise which if succeds returns UserRef\n\n\n// ADD SHOP-DATA TO FIREBASE\nexport const addCollectionAndDocumentsForShopCollections = async (collectionName,objectsToAdd)=>{\n    const collectionRef= firestore.collection(collectionName);\n    const batch =firestore.batch();  // batch all queries together so that either all fail or pass\n    objectsToAdd.forEach(object=>{\n        const { items, title } = object;\n        const newDocRef= collectionRef.doc();  // generate a doc with unique id\n        batch.set(newDocRef,{title,items});\n    });\n    return await batch.commit();\n};\n\n// gets array of 'collections' document from firestore then return it after converting it to an Object same form as in shop.data.js\nexport const getShopData =collectionSnapshots=>{\n\n    const transformedCollections=collectionSnapshots.docs.map(doc=>{\n\n        const {title,items}=doc.data();\n        const id=doc.id;\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id,\n            items,\n            title,\n        };\n        \n    });\n\n    return transformedCollections.reduce((collections,collection)=>{\n        collections[collection.title.toLowerCase()]=collection;\n        return collections;\n    },{});\n}\n\nexport const getUserinSession=()=>{\n    return new Promise((resolve,reject)=>{    \n        const unsubscribe= auth.onAuthStateChanged(userAuth=>{   //if we get userAuth resolve the promise else reject with error\n            unsubscribe();   //since we want result only once unsubscribe from onAuthStateChanged observer\n            resolve(userAuth);\n        },reject);\n    })\n}\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}